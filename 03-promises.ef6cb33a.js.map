{"mappings":"igBAGMA,EAASC,SAASC,cAAc,SA8BtC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAS,SAACC,EAASC,GAC5B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAACH,SAAUA,EAAUC,MAAOA,IAEpCG,EAAO,CAACJ,SAAUA,EAAUC,MAAOA,MAEpCA,MAtCPL,EAAOa,iBAAiB,UAExB,SAAuBC,GACrBA,EAAEC,iBAEF,IAAMC,EAAQC,OAAOjB,EAAOK,MAAMa,OAC5BC,EAAOF,OAAOjB,EAAOmB,KAAKD,OAC1BE,EAASH,OAAOjB,EAAOoB,OAAOF,OAEpC,GAAIF,EAAQ,GAAKG,EAAO,GAAKC,GAAU,EAErC,YADAC,EAAAC,OAAOC,QAAQ,kDAAmD,CAACC,cAAc,EAAMC,MAAO,QAASC,QAAS,MAMlH,IAFC,IAAIC,EAAaX,EAETY,EAAI,EAAGA,GAAKR,EAAQQ,IAC3BzB,EAAcyB,EAAGD,GAChBE,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MACjBgB,EAAAC,OAAOS,QAAQ,uBAAwCC,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,MAAK,CAAC4B,SAAS,EAAOR,MAAO,QAASC,QAAS,SAE7GQ,OAAM,SAAAJ,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MAClBgB,EAAAC,OAAOa,QAAQ,sBAAqCH,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,MAAK,CAAC4B,SAAS,EAAOR,MAAO,QAASC,QAAS,SAG3GC,GAAcR,K","sources":["src/js/03-promises.js"],"sourcesContent":["import '../css/styles.css'\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\nformEl.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit (e) {\n  e.preventDefault();\n\n  const delay = Number(formEl.delay.value);\n  const step = Number(formEl.step.value);\n  const amount = Number(formEl.amount.value);\n  \n  if (delay < 0 || step < 0 || amount <= 0) {\n    Notify.warning('The values of the input fields must be positive', {clickToClose: true, width: '350px', timeout: 5000,});\n    return;\n   }\n\n   let totalDelay = delay;\n  \n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, totalDelay)\n    .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {useIcon: false, width: '240px', timeout: 7000,});\n    })\n    .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {useIcon: false, width: '240px', timeout: 7000,});\n    });\n\n    totalDelay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise ((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {      \n      if (shouldResolve) {\n        resolve({position: position, delay: delay});\n      } else {\n        reject({position: position, delay: delay});\n      }\n    }, delay);\n  });\n}"],"names":["$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","delay1","Number","value","step","amount","$h6c0i","Notify","warning","clickToClose","width","timeout","totalDelay","i","then","param","success","concat","useIcon","catch","failure"],"version":3,"file":"03-promises.ef6cb33a.js.map"}